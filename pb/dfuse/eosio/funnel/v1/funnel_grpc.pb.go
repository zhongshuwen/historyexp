// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: dfuse/eosio/funnel/v1/funnel.proto

package pbfunnel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FunnelClient is the client API for Funnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunnelClient interface {
	StreamBlocks(ctx context.Context, in *StreamBlockRequest, opts ...grpc.CallOption) (Funnel_StreamBlocksClient, error)
}

type funnelClient struct {
	cc grpc.ClientConnInterface
}

func NewFunnelClient(cc grpc.ClientConnInterface) FunnelClient {
	return &funnelClient{cc}
}

func (c *funnelClient) StreamBlocks(ctx context.Context, in *StreamBlockRequest, opts ...grpc.CallOption) (Funnel_StreamBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Funnel_ServiceDesc.Streams[0], "/dfuse.eosio.funnel.v1.Funnel/StreamBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &funnelStreamBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Funnel_StreamBlocksClient interface {
	Recv() (*StreamBlockResponse, error)
	grpc.ClientStream
}

type funnelStreamBlocksClient struct {
	grpc.ClientStream
}

func (x *funnelStreamBlocksClient) Recv() (*StreamBlockResponse, error) {
	m := new(StreamBlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FunnelServer is the server API for Funnel service.
// All implementations must embed UnimplementedFunnelServer
// for forward compatibility
type FunnelServer interface {
	StreamBlocks(*StreamBlockRequest, Funnel_StreamBlocksServer) error
	mustEmbedUnimplementedFunnelServer()
}

// UnimplementedFunnelServer must be embedded to have forward compatible implementations.
type UnimplementedFunnelServer struct {
}

func (UnimplementedFunnelServer) StreamBlocks(*StreamBlockRequest, Funnel_StreamBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlocks not implemented")
}
func (UnimplementedFunnelServer) mustEmbedUnimplementedFunnelServer() {}

// UnsafeFunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunnelServer will
// result in compilation errors.
type UnsafeFunnelServer interface {
	mustEmbedUnimplementedFunnelServer()
}

func RegisterFunnelServer(s grpc.ServiceRegistrar, srv FunnelServer) {
	s.RegisterService(&Funnel_ServiceDesc, srv)
}

func _Funnel_StreamBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunnelServer).StreamBlocks(m, &funnelStreamBlocksServer{stream})
}

type Funnel_StreamBlocksServer interface {
	Send(*StreamBlockResponse) error
	grpc.ServerStream
}

type funnelStreamBlocksServer struct {
	grpc.ServerStream
}

func (x *funnelStreamBlocksServer) Send(m *StreamBlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Funnel_ServiceDesc is the grpc.ServiceDesc for Funnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Funnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.eosio.funnel.v1.Funnel",
	HandlerType: (*FunnelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlocks",
			Handler:       _Funnel_StreamBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/eosio/funnel/v1/funnel.proto",
}
