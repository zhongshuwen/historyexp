// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: dfuse/eosio/statedb/v1/statedb.proto

package pbstatedb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateClient interface {
	// Replaces /v0/state/abi
	GetABI(ctx context.Context, in *GetABIRequest, opts ...grpc.CallOption) (*GetABIResponse, error)
	// Replaces /v0/state/key_accounts
	GetKeyAccounts(ctx context.Context, in *GetKeyAccountsRequest, opts ...grpc.CallOption) (*GetKeyAccountsResponse, error)
	// Replaces /v0/state/permission_links
	GetPermissionLinks(ctx context.Context, in *GetPermissionLinksRequest, opts ...grpc.CallOption) (*GetPermissionLinksResponse, error)
	// Replaces /v0/state/table/row
	GetTableRow(ctx context.Context, in *GetTableRowRequest, opts ...grpc.CallOption) (*GetTableRowResponse, error)
	// Replaces /v0/state/table
	StreamTableRows(ctx context.Context, in *StreamTableRowsRequest, opts ...grpc.CallOption) (State_StreamTableRowsClient, error)
	// Replaces /v0/state/table_scopes
	StreamTableScopes(ctx context.Context, in *StreamTableScopesRequest, opts ...grpc.CallOption) (State_StreamTableScopesClient, error)
	// Replaces /v0/state/tables/scopes
	StreamMultiScopesTableRows(ctx context.Context, in *StreamMultiScopesTableRowsRequest, opts ...grpc.CallOption) (State_StreamMultiScopesTableRowsClient, error)
	// Replaces /v0/state/tables/accounts
	StreamMultiContractsTableRows(ctx context.Context, in *StreamMultiContractsTableRowsRequest, opts ...grpc.CallOption) (State_StreamMultiContractsTableRowsClient, error)
}

type stateClient struct {
	cc grpc.ClientConnInterface
}

func NewStateClient(cc grpc.ClientConnInterface) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) GetABI(ctx context.Context, in *GetABIRequest, opts ...grpc.CallOption) (*GetABIResponse, error) {
	out := new(GetABIResponse)
	err := c.cc.Invoke(ctx, "/dfuse.eosio.statedb.v1.State/GetABI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetKeyAccounts(ctx context.Context, in *GetKeyAccountsRequest, opts ...grpc.CallOption) (*GetKeyAccountsResponse, error) {
	out := new(GetKeyAccountsResponse)
	err := c.cc.Invoke(ctx, "/dfuse.eosio.statedb.v1.State/GetKeyAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetPermissionLinks(ctx context.Context, in *GetPermissionLinksRequest, opts ...grpc.CallOption) (*GetPermissionLinksResponse, error) {
	out := new(GetPermissionLinksResponse)
	err := c.cc.Invoke(ctx, "/dfuse.eosio.statedb.v1.State/GetPermissionLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetTableRow(ctx context.Context, in *GetTableRowRequest, opts ...grpc.CallOption) (*GetTableRowResponse, error) {
	out := new(GetTableRowResponse)
	err := c.cc.Invoke(ctx, "/dfuse.eosio.statedb.v1.State/GetTableRow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) StreamTableRows(ctx context.Context, in *StreamTableRowsRequest, opts ...grpc.CallOption) (State_StreamTableRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &State_ServiceDesc.Streams[0], "/dfuse.eosio.statedb.v1.State/StreamTableRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStreamTableRowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type State_StreamTableRowsClient interface {
	Recv() (*TableRowResponse, error)
	grpc.ClientStream
}

type stateStreamTableRowsClient struct {
	grpc.ClientStream
}

func (x *stateStreamTableRowsClient) Recv() (*TableRowResponse, error) {
	m := new(TableRowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateClient) StreamTableScopes(ctx context.Context, in *StreamTableScopesRequest, opts ...grpc.CallOption) (State_StreamTableScopesClient, error) {
	stream, err := c.cc.NewStream(ctx, &State_ServiceDesc.Streams[1], "/dfuse.eosio.statedb.v1.State/StreamTableScopes", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStreamTableScopesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type State_StreamTableScopesClient interface {
	Recv() (*TableScopeResponse, error)
	grpc.ClientStream
}

type stateStreamTableScopesClient struct {
	grpc.ClientStream
}

func (x *stateStreamTableScopesClient) Recv() (*TableScopeResponse, error) {
	m := new(TableScopeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateClient) StreamMultiScopesTableRows(ctx context.Context, in *StreamMultiScopesTableRowsRequest, opts ...grpc.CallOption) (State_StreamMultiScopesTableRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &State_ServiceDesc.Streams[2], "/dfuse.eosio.statedb.v1.State/StreamMultiScopesTableRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStreamMultiScopesTableRowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type State_StreamMultiScopesTableRowsClient interface {
	Recv() (*TableRowsScopeResponse, error)
	grpc.ClientStream
}

type stateStreamMultiScopesTableRowsClient struct {
	grpc.ClientStream
}

func (x *stateStreamMultiScopesTableRowsClient) Recv() (*TableRowsScopeResponse, error) {
	m := new(TableRowsScopeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateClient) StreamMultiContractsTableRows(ctx context.Context, in *StreamMultiContractsTableRowsRequest, opts ...grpc.CallOption) (State_StreamMultiContractsTableRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &State_ServiceDesc.Streams[3], "/dfuse.eosio.statedb.v1.State/StreamMultiContractsTableRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStreamMultiContractsTableRowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type State_StreamMultiContractsTableRowsClient interface {
	Recv() (*TableRowsContractResponse, error)
	grpc.ClientStream
}

type stateStreamMultiContractsTableRowsClient struct {
	grpc.ClientStream
}

func (x *stateStreamMultiContractsTableRowsClient) Recv() (*TableRowsContractResponse, error) {
	m := new(TableRowsContractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateServer is the server API for State service.
// All implementations must embed UnimplementedStateServer
// for forward compatibility
type StateServer interface {
	// Replaces /v0/state/abi
	GetABI(context.Context, *GetABIRequest) (*GetABIResponse, error)
	// Replaces /v0/state/key_accounts
	GetKeyAccounts(context.Context, *GetKeyAccountsRequest) (*GetKeyAccountsResponse, error)
	// Replaces /v0/state/permission_links
	GetPermissionLinks(context.Context, *GetPermissionLinksRequest) (*GetPermissionLinksResponse, error)
	// Replaces /v0/state/table/row
	GetTableRow(context.Context, *GetTableRowRequest) (*GetTableRowResponse, error)
	// Replaces /v0/state/table
	StreamTableRows(*StreamTableRowsRequest, State_StreamTableRowsServer) error
	// Replaces /v0/state/table_scopes
	StreamTableScopes(*StreamTableScopesRequest, State_StreamTableScopesServer) error
	// Replaces /v0/state/tables/scopes
	StreamMultiScopesTableRows(*StreamMultiScopesTableRowsRequest, State_StreamMultiScopesTableRowsServer) error
	// Replaces /v0/state/tables/accounts
	StreamMultiContractsTableRows(*StreamMultiContractsTableRowsRequest, State_StreamMultiContractsTableRowsServer) error
	mustEmbedUnimplementedStateServer()
}

// UnimplementedStateServer must be embedded to have forward compatible implementations.
type UnimplementedStateServer struct {
}

func (UnimplementedStateServer) GetABI(context.Context, *GetABIRequest) (*GetABIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetABI not implemented")
}
func (UnimplementedStateServer) GetKeyAccounts(context.Context, *GetKeyAccountsRequest) (*GetKeyAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyAccounts not implemented")
}
func (UnimplementedStateServer) GetPermissionLinks(context.Context, *GetPermissionLinksRequest) (*GetPermissionLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionLinks not implemented")
}
func (UnimplementedStateServer) GetTableRow(context.Context, *GetTableRowRequest) (*GetTableRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableRow not implemented")
}
func (UnimplementedStateServer) StreamTableRows(*StreamTableRowsRequest, State_StreamTableRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTableRows not implemented")
}
func (UnimplementedStateServer) StreamTableScopes(*StreamTableScopesRequest, State_StreamTableScopesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTableScopes not implemented")
}
func (UnimplementedStateServer) StreamMultiScopesTableRows(*StreamMultiScopesTableRowsRequest, State_StreamMultiScopesTableRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMultiScopesTableRows not implemented")
}
func (UnimplementedStateServer) StreamMultiContractsTableRows(*StreamMultiContractsTableRowsRequest, State_StreamMultiContractsTableRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMultiContractsTableRows not implemented")
}
func (UnimplementedStateServer) mustEmbedUnimplementedStateServer() {}

// UnsafeStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServer will
// result in compilation errors.
type UnsafeStateServer interface {
	mustEmbedUnimplementedStateServer()
}

func RegisterStateServer(s grpc.ServiceRegistrar, srv StateServer) {
	s.RegisterService(&State_ServiceDesc, srv)
}

func _State_GetABI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetABIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetABI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.eosio.statedb.v1.State/GetABI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetABI(ctx, req.(*GetABIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetKeyAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetKeyAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.eosio.statedb.v1.State/GetKeyAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetKeyAccounts(ctx, req.(*GetKeyAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetPermissionLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetPermissionLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.eosio.statedb.v1.State/GetPermissionLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetPermissionLinks(ctx, req.(*GetPermissionLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetTableRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetTableRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.eosio.statedb.v1.State/GetTableRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetTableRow(ctx, req.(*GetTableRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_StreamTableRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTableRowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServer).StreamTableRows(m, &stateStreamTableRowsServer{stream})
}

type State_StreamTableRowsServer interface {
	Send(*TableRowResponse) error
	grpc.ServerStream
}

type stateStreamTableRowsServer struct {
	grpc.ServerStream
}

func (x *stateStreamTableRowsServer) Send(m *TableRowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _State_StreamTableScopes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTableScopesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServer).StreamTableScopes(m, &stateStreamTableScopesServer{stream})
}

type State_StreamTableScopesServer interface {
	Send(*TableScopeResponse) error
	grpc.ServerStream
}

type stateStreamTableScopesServer struct {
	grpc.ServerStream
}

func (x *stateStreamTableScopesServer) Send(m *TableScopeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _State_StreamMultiScopesTableRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMultiScopesTableRowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServer).StreamMultiScopesTableRows(m, &stateStreamMultiScopesTableRowsServer{stream})
}

type State_StreamMultiScopesTableRowsServer interface {
	Send(*TableRowsScopeResponse) error
	grpc.ServerStream
}

type stateStreamMultiScopesTableRowsServer struct {
	grpc.ServerStream
}

func (x *stateStreamMultiScopesTableRowsServer) Send(m *TableRowsScopeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _State_StreamMultiContractsTableRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMultiContractsTableRowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServer).StreamMultiContractsTableRows(m, &stateStreamMultiContractsTableRowsServer{stream})
}

type State_StreamMultiContractsTableRowsServer interface {
	Send(*TableRowsContractResponse) error
	grpc.ServerStream
}

type stateStreamMultiContractsTableRowsServer struct {
	grpc.ServerStream
}

func (x *stateStreamMultiContractsTableRowsServer) Send(m *TableRowsContractResponse) error {
	return x.ServerStream.SendMsg(m)
}

// State_ServiceDesc is the grpc.ServiceDesc for State service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var State_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.eosio.statedb.v1.State",
	HandlerType: (*StateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetABI",
			Handler:    _State_GetABI_Handler,
		},
		{
			MethodName: "GetKeyAccounts",
			Handler:    _State_GetKeyAccounts_Handler,
		},
		{
			MethodName: "GetPermissionLinks",
			Handler:    _State_GetPermissionLinks_Handler,
		},
		{
			MethodName: "GetTableRow",
			Handler:    _State_GetTableRow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTableRows",
			Handler:       _State_StreamTableRows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTableScopes",
			Handler:       _State_StreamTableScopes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMultiScopesTableRows",
			Handler:       _State_StreamMultiScopesTableRows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMultiContractsTableRows",
			Handler:       _State_StreamMultiContractsTableRows_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/eosio/statedb/v1/statedb.proto",
}
