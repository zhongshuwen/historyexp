// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: dfuse/eosio/abicodec/v1/abicodec.proto

package pbabicodec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DecoderClient is the client API for Decoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecoderClient interface {
	DecodeTable(ctx context.Context, in *DecodeTableRequest, opts ...grpc.CallOption) (*Response, error)
	DecodeAction(ctx context.Context, in *DecodeActionRequest, opts ...grpc.CallOption) (*Response, error)
	GetAbi(ctx context.Context, in *GetAbiRequest, opts ...grpc.CallOption) (*Response, error)
}

type decoderClient struct {
	cc grpc.ClientConnInterface
}

func NewDecoderClient(cc grpc.ClientConnInterface) DecoderClient {
	return &decoderClient{cc}
}

func (c *decoderClient) DecodeTable(ctx context.Context, in *DecodeTableRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dfuse.eosio.abicodec.v1.Decoder/DecodeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decoderClient) DecodeAction(ctx context.Context, in *DecodeActionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dfuse.eosio.abicodec.v1.Decoder/DecodeAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decoderClient) GetAbi(ctx context.Context, in *GetAbiRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dfuse.eosio.abicodec.v1.Decoder/GetAbi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecoderServer is the server API for Decoder service.
// All implementations must embed UnimplementedDecoderServer
// for forward compatibility
type DecoderServer interface {
	DecodeTable(context.Context, *DecodeTableRequest) (*Response, error)
	DecodeAction(context.Context, *DecodeActionRequest) (*Response, error)
	GetAbi(context.Context, *GetAbiRequest) (*Response, error)
	mustEmbedUnimplementedDecoderServer()
}

// UnimplementedDecoderServer must be embedded to have forward compatible implementations.
type UnimplementedDecoderServer struct {
}

func (UnimplementedDecoderServer) DecodeTable(context.Context, *DecodeTableRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeTable not implemented")
}
func (UnimplementedDecoderServer) DecodeAction(context.Context, *DecodeActionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeAction not implemented")
}
func (UnimplementedDecoderServer) GetAbi(context.Context, *GetAbiRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbi not implemented")
}
func (UnimplementedDecoderServer) mustEmbedUnimplementedDecoderServer() {}

// UnsafeDecoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecoderServer will
// result in compilation errors.
type UnsafeDecoderServer interface {
	mustEmbedUnimplementedDecoderServer()
}

func RegisterDecoderServer(s grpc.ServiceRegistrar, srv DecoderServer) {
	s.RegisterService(&Decoder_ServiceDesc, srv)
}

func _Decoder_DecodeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecoderServer).DecodeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.eosio.abicodec.v1.Decoder/DecodeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecoderServer).DecodeTable(ctx, req.(*DecodeTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decoder_DecodeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecoderServer).DecodeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.eosio.abicodec.v1.Decoder/DecodeAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecoderServer).DecodeAction(ctx, req.(*DecodeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decoder_GetAbi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecoderServer).GetAbi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.eosio.abicodec.v1.Decoder/GetAbi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecoderServer).GetAbi(ctx, req.(*GetAbiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Decoder_ServiceDesc is the grpc.ServiceDesc for Decoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Decoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.eosio.abicodec.v1.Decoder",
	HandlerType: (*DecoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecodeTable",
			Handler:    _Decoder_DecodeTable_Handler,
		},
		{
			MethodName: "DecodeAction",
			Handler:    _Decoder_DecodeAction_Handler,
		},
		{
			MethodName: "GetAbi",
			Handler:    _Decoder_GetAbi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfuse/eosio/abicodec/v1/abicodec.proto",
}
